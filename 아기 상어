#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <queue>
using namespace std;

int n; // 입력받을 배열 크기
int map[20][20]; // 배열 최대 크기
int shark_size, shark_eat; // 상어의 크기, 먹은 물고기 개수
bool isUpdate; // map 업데이트 여부

struct SHARK {
	int y, x, time;
}; // 상어 좌표와 시간 들어있는 구조체

SHARK shark; 
const int dy[] = { 0, 0, -1, 1 };
const int dx[] = { -1, 1, 0, 0 }; // 방향

int main() {
	
	scanf("%d", &n);
	for (int y = 0; y < n; ++y) {
		for (int x = 0; x < n; ++x) {
			scanf("%d", &map[y][x]);

			if (map[y][x] == 9) {
				shark.y = y; shark.x = x; shark.time = 0;
				shark_size = 2, shark_eat = 0;
				map[y][x] = 0;
			}
		}
	} // input값 받고, 상어 처음 위치 확인 후 변수 초기화

	isUpdate = true;
	while (isUpdate) {
		isUpdate = false;

		queue<SHARK>q;
		bool visited[20][20] = { false , };
		visited[shark.y][shark.x] = true;
		q.push(shark);

		SHARK candi;
		candi.y = 20; candi.time = -1;
		while (!q.empty()) {
			SHARK cur = q.front(); q.pop();

			if (candi.time != -1 && candi.time < cur.time) {
				break;
			}

			if (map[cur.y][cur.x] < shark_size && map[cur.y][cur.x] != 0) {
				isUpdate = true;
				if (candi.y > cur.y || (candi.y == cur.y && candi.x > cur.x)) {
					candi = cur;
				}
			}
			for (int dir = 0; dir < 4; ++dir) {
				SHARK next;
				next.y = cur.y + dy[dir];
				next.x = cur.x + dx[dir];
				next.time = cur.time + 1;

				if (next.y < 0 || next.y >= n || next.x < 0 || next.x >= n) {
					continue;
				}

				if (visited[next.y][next.x] == false && map[next.y][next.x] <= shark_size) {
					visited[next.y][next.x] = true;
					q.push(next);
				}
			}
			
		}
		
		if (isUpdate) {
			shark = candi;
			++shark_eat;
			if (shark_eat == shark_size) {
				++shark_size;
				shark_eat = 0;
			}
			map[shark.y][shark.x] = 0;
		}
	}

	printf("%d", shark.time);

	return 0;
}
